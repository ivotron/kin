# Versos: VERSioned Object Storage

This library does not perform direct I/O operations into/from the 
objects it's managing. It's just a thin layer for grouping objects and 
handling versioning collectively.

High-level view of library:

  - repository
      - coordinator
          - refdb
              - revision
                  - revision ids
                  - contents of each revision
                  - object metadata (name, backend, etc.)
         - objectversioning
             - snapshot
             - remove

A repository just calls to the underlying coordinator. The coordinator 
uses a `refdb` to store metadata about revisions and makes sure that 
the integrity of the `refdb` is consistent [^consistency_example]. It 
also makes use of the `snapshot()/remove()` functionality of provided 
by the `objectversioning` package (implemented through the 
`VersionedObject` interface) in order to make sure that object 
snapshots are kept in sync with the metadata.

[^consistency_example]: for example, if two users A,B checkout the 
same HEAD, when A `commit()`'s its revision, that revision becomes the 
new HEAD. What happens if user B tries to commit based on the 
not-HEAD-anymore revision? The coordinator should ensure that this 
doesn't happen.

The user primarly interfaces with `Repository` and `Version` classes. 
The former to `checkout()` existing revisions and `create()` new ones 
based on existing ones; the latter to `add()/remove()` objects to/from 
versions. For examples, see the `src/test/` folder.

In terms of actual I/O, the user operates on objects directly through 
the `VersionedObject` interface. In other words, `Versos` doesn't deal 
with I/O coordination, thus this is up to the application/user doing 
I/O. `Versos` does make sure that I/O is performed on valid versions, 
e.g., writes aren't done on objects that correspond to an 
already-committed version

One of the main feature of versos is its pluggability. Depending on 
which implementations of the tree main components of the library 
(`Coordinator`, `RefDB` and `VersionedObject`) are used, the 
consistency guarantees change.

